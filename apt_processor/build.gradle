// 和 apply plugin 功能一样 (但 apply plugin 更灵活)
// plugins {} 块导入的是Gradle官方插件仓库里的插件。如果使用 buildscript {} 块指定第三方库作为Gradle插件的话，指定插件就需要使用 apply plugin 了
plugins {
    id 'java-library'
    id 'kotlin'
    id 'kotlin-kapt'
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // https://mvnrepository.com/artifact/com.squareup/javapoet
    implementation "com.squareup:javapoet:1.13.0"
    // 此依赖不可或缺, 否则会导致 @AutoService 注解无法 import
    // 使用compileOnly(provided已过时) 而不使用 implementation 是因为只有编译时才会需要此依赖
    //noinspection AnnotationProcessorOnCompilePath
    compileOnly 'com.google.auto.service:auto-service:1.0-rc7'
    // 此依赖不可或缺, 否则会导致注解执行器不执行, 具体原因未知
    kapt 'com.google.auto.service:auto-service:1.0-rc7'
}

////// 本地依赖打包开始 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//apply plugin: 'maven'
//
//ext {
//    GENERATE_DIRECTORY = "apt_processor"
//    GROUP_ID = "com.github.SJF20"
//    ARTICFCT_ID = "module_event_dispatcher_apt_processor"
//    VERSION = "1.0.0"
//}
//
//// 源代码一起打包(不需要打包源代码的不要添加这几行)
//task sourcesJar(type: Jar) {
//    from sourceSets.main.allJava
//    archiveClassifier = 'sources'
//}
//
//// 本地依赖打包
//uploadArchives {
//    repositories {
//        mavenDeployer{
//            repository(url: "file://" + rootDir.parent + File.separator + "generate" + File.separator + GENERATE_DIRECTORY)
//            pom.project {
//                groupId = GROUP_ID
//                artifactId = ARTICFCT_ID
//                version = VERSION
//            }
//            artifacts {
//                archives sourcesJar
//            }
//        }
//    }
//}

////// 本地依赖打包结束 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////